import React, { useState } from 'react'; // Sample data based on UK Obesity patient journey research const journeyStagesData = [ { id: 1, name: "Recognition", description: "Period when patients first recognize weight as a health concern", activities: [ "Recognition of weight gain", "Self-assessment of impact on health", "Online research about obesity", "Self-management attempts (diet/exercise)", "Decision to seek professional help" ], painPoints: [ "Stigma and shame around weight", "Confusion about BMI thresholds", "Misinformation on diet and exercise", "Failed self-management attempts", "Fear of judgment from healthcare providers" ], stakeholders: [ { name: "Primary Care Physician", involvement: "Low" }, { name: "Practice Nurse", involvement: "Low" }, { name: "Family/Carers", involvement: "Medium" }, { name: "Online Communities", involvement: "Medium" } ], infoSources: [ "Online health websites", "Social media", "Family and friends", "Popular diet books/programs", "NHS weight management resources" ], decisionPoints: [ { name: "Seeking Medical Help", description: "Decision to consult with healthcare professional", keyFactors: ["Severity of weight concern", "Impact on daily activities", "Failed personal attempts", "Comorbidities"] } ], dropoutRate: 0.60, emotionalState: "Frustration/Shame" }, { id: 2, name: "Assessment", description: "Clinical evaluation of weight status and related health conditions", activities: [ "Initial GP consultation", "BMI calculation", "Waist circumference measurement", "Medical history review", "Blood tests (lipids, glucose, etc.)", "Comorbidity assessment", "Risk factor evaluation" ], painPoints: [ "Lack of sensitivity from providers", "Oversimplification (just eat less, move more)", "Limited consultation time", "Focus on BMI without context", "Feeling blamed for weight issues" ], stakeholders: [ { name: "Primary Care Physician", involvement: "High" }, { name: "Practice Nurse", involvement: "High" }, { name: "Phlebotomist", involvement: "Medium" }, { name: "Laboratory Staff", involvement: "Medium" }, { name: "Family/Carers", involvement: "Low" } ], infoSources: [ "GP explanation", "NHS leaflets", "Online NHS BMI calculator", "Healthcare provider advice", "Information about local services" ], decisionPoints: [ { name: "Pathway Selection", description: "Decision on initial management approach", keyFactors: ["BMI category", "Comorbidities", "Previous attempts", "Psychological factors", "Available local services"] }, { name: "Referral Eligibility", description: "Decision on tier of service required", keyFactors: ["BMI threshold (>30 or >27 with comorbidities)", "Local commissioning criteria", "Patient preference"] } ], dropoutRate: 0.25, emotionalState: "Anxiety/Hope" }, { id: 3, name: "Initial Intervention", description: "First-line treatments and lifestyle interventions for weight management", activities: [ "Tier 2 weight management service referral", "Dietary advice and planning", "Physical activity guidance", "Behavior change counseling", "Group program participation", "Goal setting and monitoring", "Follow-up appointments" ], painPoints: [ "Long waiting lists for services", "Inconvenient program times/locations", "Generic advice not personalized", "Lack of psychological support", "Limited follow-up support", "Inconsistent service quality" ], stakeholders: [ { name: "Primary Care Physician", involvement: "Medium" }, { name: "Practice Nurse", involvement: "Medium" }, { name: "Dietitian", involvement: "High" }, { name: "Exercise Specialist", involvement: "High" }, { name: "Weight Management Service", involvement: "High" }, { name: "Psychological Wellbeing Practitioner", involvement: "Medium" } ], infoSources: [ "NHS weight management materials", "Program-specific resources", "Mobile apps for tracking", "Peer support in programs", "Dietitian handouts" ], decisionPoints: [ { name: "Program Engagement", description: "Decision to actively engage with program", keyFactors: ["Program quality", "Convenience", "Perceived relevance", "Early results", "Provider relationship"] }, { name: "Treatment Escalation", description: "Decision to seek more intensive intervention", keyFactors: ["Response to tier 2 services", "Weight loss achieved", "Comorbidity impact", "Personal motivation"] } ], dropoutRate: 0.40, emotionalState: "Determination/Uncertainty" }, { id: 4, name: "Specialist Care", description: "Multi-disciplinary specialist obesity services (Tier 3)", activities: [ "Specialist obesity service referral", "Multidisciplinary assessment", "Medical obesity treatments", "Pharmacotherapy consideration", "Psychological intervention", "Intensive lifestyle support", "Consideration for surgical assessment" ], painPoints: [ "Limited availability of tier 3 services", "Restrictive eligibility criteria", "Geographic inequalities in access", "Long waiting times", "Medication side effects", "Cost of treatments not covered by NHS" ], stakeholders: [ { name: "Obesity Specialist", involvement: "High" }, { name: "Endocrinologist", involvement: "Medium" }, { name: "Specialist Dietitian", involvement: "High" }, { name: "Clinical Psychologist", involvement: "High" }, { name: "Specialist Nurse", involvement: "High" }, { name: "Pharmacist", involvement: "Medium" }, { name: "Primary Care Physician", involvement: "Low" } ], infoSources: [ "Specialist clinic information", "Medication guides", "Psychological resources", "Peer support groups", "Clinical trial information" ], decisionPoints: [ { name: "Medication Initiation", description: "Decision to start anti-obesity medication", keyFactors: ["BMI/comorbidity thresholds", "Contraindications", "Cost considerations", "Patient preferences"] }, { name: "Surgical Assessment", description: "Decision to pursue bariatric surgery evaluation", keyFactors: ["BMI thresholds (>40 or >35 with comorbidities)", "Previous intervention failures", "Psychological readiness"] } ], dropoutRate: 0.30, emotionalState: "Cautious Optimism/Frustration" }, { id: 5, name: "Surgical Pathway", description: "Bariatric surgery evaluation and procedure (Tier 4)", activities: [ "Surgical evaluation", "Pre-surgical assessment", "Psychological evaluation", "Pre-surgical diet", "Bariatric procedure", "Hospital recovery", "Post-surgical dietary progression" ], painPoints: [ "Very restricted access to surgery", "Extensive pre-op requirements", "Fear of surgical complications", "Limited post-op support", "Adjustment to new eating patterns", "Loose skin/body image issues" ], stakeholders: [ { name: "Bariatric Surgeon", involvement: "High" }, { name: "Anesthesiologist", involvement: "High" }, { name: "Bariatric Nurse", involvement: "High" }, { name: "Dietitian", involvement: "High" }, { name: "Clinical Psychologist", involvement: "High" }, { name: "Primary Care Physician", involvement: "Low" } ], infoSources: [ "Surgical team consultations", "Pre/post-op protocols", "Patient support groups", "Online bariatric communities", "Bariatric-specific nutrition guides" ], decisionPoints: [ { name: "Procedure Selection", description: "Decision on type of bariatric procedure", keyFactors: ["Surgeon recommendation", "BMI", "Comorbidities", "Eating patterns", "Personal preference"] } ], dropoutRate: 0.10, emotionalState: "Fear/Excitement" }, { id: 6, name: "Long-term Management", description: "Ongoing support and management of weight and health", activities: [ "Regular follow-up appointments", "Nutritional monitoring", "Physical activity maintenance", "Psychological support", "Management of weight fluctuations", "Comorbidity monitoring", "Support group participation" ], painPoints: [ "Weight regain concerns", "Declining follow-up support", "Nutritional deficiencies", "Body image challenges", "Long-term medication effects", "Transition back to primary care" ], stakeholders: [ { name: "Primary Care Physician", involvement: "Medium" }, { name: "Practice Nurse", involvement: "Medium" }, { name: "Dietitian", involvement: "Medium" }, { name: "Psychologist", involvement: "Low" }, { name: "Support Group", involvement: "High" }, { name: "Family/Carers", involvement: "High" } ], infoSources: [ "Long-term management protocols", "Peer support networks", "Maintenance strategies", "Mobile health tracking apps", "Online communities" ], decisionPoints: [ { name: "Long-term Support", description: "Decision on ongoing support mechanisms", keyFactors: ["Available services", "Insurance/funding", "Personal preference", "Weight stability"] } ], dropoutRate: 0.35, emotionalState: "Vigilance/Acceptance" } ]; // Barriers data categorized according to SOS framework const barriersData = { strategic: [ { id: "s1", name: "Inconsistent commissioning of services", description: "Significant variation in availability and access criteria for weight management services across regions", severity: "High", affectedStages: [3, 4, 5], isDropoutPoint: true }, { id: "s2", name: "Inadequate funding for obesity services", description: "Limited NHS resources allocated to weight management compared to disease burden", severity: "High", affectedStages: [3, 4, 5, 6], isDropoutPoint: false }, { id: "s3", name: "Restrictive medication reimbursement", description: "Limited NHS coverage for anti-obesity medications", severity: "High", affectedStages: [4], isDropoutPoint: true }, { id: "s4", name: "Siloed care pathways", description: "Poor integration between obesity and related condition management", severity: "Medium", affectedStages: [2, 3, 4, 6], isDropoutPoint: false } ], operational: [ { id: "o1", name: "Long waiting times", description: "Extended delays to access specialist services, often 6-12 months", severity: "High", affectedStages: [3, 4, 5], isDropoutPoint: true }, { id: "o2", name: "Limited consultation time", description: "Standard GP appointments too short for comprehensive obesity management", severity: "Medium", affectedStages: [2, 6], isDropoutPoint: false }, { id: "o3", name: "Staff training limitations", description: "Insufficient obesity-specific training for healthcare providers", severity: "Medium", affectedStages: [2, 3, 6], isDropoutPoint: false }, { id: "o4", name: "Poor coordination between tiers", description: "Fragmented transitions between different levels of obesity services", severity: "High", affectedStages: [3, 4, 5, 6], isDropoutPoint: true } ], standards: [ { id: "st1", name: "Inconsistent eligibility criteria", description: "Variable BMI and comorbidity thresholds for accessing services", severity: "High", affectedStages: [3, 4, 5], isDropoutPoint: true }, { id: "st2", name: "Inadequate psychological support", description: "Insufficient integration of mental health services in obesity pathways", severity: "High", affectedStages: [1, 2, 3, 4, 6], isDropoutPoint: true }, { id: "st3", name: "Limited long-term follow-up", description: "Lack of standardized long-term monitoring and support", severity: "Medium", affectedStages: [6], isDropoutPoint: true }, { id: "st4", name: "Weight stigma in healthcare", description: "Persistent bias and stigmatizing attitudes among healthcare providers", severity: "High", affectedStages: [1, 2, 3, 4, 5, 6], isDropoutPoint: true } ] }; // Intervention opportunities const interventionData = [ { id: "i1", name: "Digital First-Line Support", description: "NHS-approved digital platform for early intervention and self-management", impactAreas: ["Recognition", "Assessment", "Initial Intervention"], stakeholdersBenefited: ["Patients", "Primary Care", "NHS Commissioners"], implementationComplexity: "Low", potentialOutcomes: [ "Earlier engagement with weight management", "Reduced burden on GP services", "Improved accessibility for working adults", "Data collection for pathway optimization" ] }, { id: "i2", name: "Integrated Psychological Support", description: "Embedding mental health support throughout the obesity pathway", impactAreas: ["Recognition", "Assessment", "Initial Intervention", "Specialist Care", "Long-term Management"], stakeholdersBenefited: ["Patients", "Mental Health Services", "Weight Management Teams"], implementationComplexity: "Medium", potentialOutcomes: [ "Improved adherence to interventions", "Reduced weight stigma experiences", "Better management of emotional eating", "Higher long-term success rates" ] }, { id: "i3", name: "Standardized Referral Criteria", description: "National standardization of eligibility criteria for obesity services", impactAreas: ["Assessment", "Initial Intervention", "Specialist Care", "Surgical Pathway"], stakeholdersBenefited: ["Patients", "NHS Commissioners", "Healthcare Providers"], implementationComplexity: "High", potentialOutcomes: [ "Reduced geographic inequalities", "Clearer patient pathways", "More consistent resource allocation", "Reduced inappropriate referrals" ] }, { id: "i4", name: "Post-Program Support Network", description: "Structured long-term support system after completing formal interventions", impactAreas: ["Initial Intervention", "Specialist Care", "Surgical Pathway", "Long-term Management"], stakeholdersBenefited: ["Patients", "Primary Care", "Specialist Services"], implementationComplexity: "Medium", potentialOutcomes: [ "Improved weight maintenance", "Early identification of weight regain", "Sustained behavior change", "Peer support utilization" ] }, { id: "i5", name: "Healthcare Professional Training Program", description: "Comprehensive obesity management training for primary care staff", impactAreas: ["Recognition", "Assessment", "Long-term Management"], stakeholdersBenefited: ["Healthcare Providers", "Patients", "NHS System"], implementationComplexity: "Medium", potentialOutcomes: [ "Reduced weight stigma", "More effective early interventions", "Better utilization of available pathways", "Improved patient experience" ] } ]; // Main application component function ObesityJourneyTool() { const [selectedStage, setSelectedStage] = useState(null); const [viewMode, setViewMode] = useState('journey'); // journey, barriers, stakeholders, interventions const [activeBarrierCategory, setActiveBarrierCategory] = useState('strategic'); const [scenarioMode, setScenarioMode] = useState(false); const [selectedInterventions, setSelectedInterventions] = useState([]); const [showScenarioResults, setShowScenarioResults] = useState(false); // Handle stage selection const handleStageClick = (stage) => { setSelectedStage(stage); }; // Handle intervention selection const handleInterventionToggle = (interventionId) => { if (selectedInterventions.includes(interventionId)) { setSelectedInterventions(selectedInterventions.filter(id => id !== interventionId)); } else { setSelectedInterventions([...selectedInterventions, interventionId]); } }; // Handle scenario modeling const handleRunScenario = () => { setShowScenarioResults(true); }; const handleResetScenario = () => { setSelectedInterventions([]); setShowScenarioResults(false); }; // Get color based on involvement level const getInvolvementColor = (level) => { switch(level) { case 'High': return 'bg-red-100 text-red-800'; case 'Medium': return 'bg-yellow-100 text-yellow-800'; case 'Low': return 'bg-green-100 text-green-800'; default: return 'bg-gray-100 text-gray-800'; } }; // Get color based on barrier severity const getSeverityColor = (severity) => { switch(severity) { case 'High': return 'bg-red-100 border-red-300 text-red-800'; case 'Medium': return 'bg-yellow-100 border-yellow-300 text-yellow-800'; case 'Low': return 'bg-green-100 border-green-300 text-green-800'; default: return 'bg-gray-100 border-gray-300 text-gray-800'; } }; // Get color based on implementation complexity const getComplexityColor = (complexity) => { switch(complexity) { case 'High': return 'bg-red-100 text-red-800'; case 'Medium': return 'bg-yellow-100 text-yellow-800'; case 'Low': return 'bg-green-100 text-green-800'; default: return 'bg-gray-100 text-gray-800'; } }; // Get emotion color const getEmotionColor = (emotion) => { switch(emotion) { case 'Frustration/Shame': return 'bg-purple-100'; case 'Anxiety/Hope': return 'bg-yellow-100'; case 'Determination/Uncertainty': return 'bg-blue-100'; case 'Cautious Optimism/Frustration': return 'bg-teal-100'; case 'Fear/Excitement': return 'bg-orange-100'; case 'Vigilance/Acceptance': return 'bg-green-100'; default: return 'bg-gray-100'; } }; // Calculate scenario impact (simplified model) const calculateScenarioImpact = () => { if (selectedInterventions.length === 0) return null; const impactedStages = new Set(); const interventionsImplemented = interventionData.filter(int => selectedInterventions.includes(int.id)); // Determine which stages are impacted by selected interventions interventionsImplemented.forEach(intervention => { intervention.impactAreas.forEach(area => { const stageId = journeyStagesData.findIndex(stage => stage.name === area) + 1; if (stageId > 0) impactedStages.add(stageId); }); }); // Calculate impact const baselineDropout = journeyStagesData.reduce((acc, stage) => acc + stage.dropoutRate, 0) / journeyStagesData.length; // Simplified impact model const impactPerIntervention = 0.05; // 5% improvement per intervention const improvedDropout = baselineDropout - (selectedInterventions.length * impactPerIntervention); return { baselineDropout: baselineDropout, projectedDropout: Math.max(improvedDropout, 0.1), // Floor at 10% impactedStages: Array.from(impactedStages), interventionsImplemented: interventionsImplemented.length, patientImpact: selectedInterventions.length > 2 ? "High" : selectedInterventions.length > 0 ? "Medium" : "Low", systemImpact: selectedInterventions.length > 3 ? "High" : selectedInterventions.length > 1 ? "Medium" : "Low", implementationEffort: interventionsImplemented.reduce((acc, int) => { const complexityScore = int.implementationComplexity === "High" ? 3 : int.implementationComplexity === "Medium" ? 2 : 1; return acc + complexityScore; }, 0) }; }; // Render barriers section const renderBarriers = () => { return ( <div className="mt-4"> <div className="flex mb-4 space-x-2"> <button onClick={() => setActiveBarrierCategory('strategic')} className={`px-4 py-2 rounded ${activeBarrierCategory === 'strategic' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Strategic </button> <button onClick={() => setActiveBarrierCategory('operational')} className={`px-4 py-2 rounded ${activeBarrierCategory === 'operational' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Operational </button> <button onClick={() => setActiveBarrierCategory('standards')} className={`px-4 py-2 rounded ${activeBarrierCategory === 'standards' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Standards </button> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {barriersData[activeBarrierCategory].map(barrier => ( <div key={barrier.id} className={`p-4 rounded-lg border ${getSeverityColor(barrier.severity)} ${barrier.isDropoutPoint ? 'border-l-4 border-l-red-600' : ''}`} > <div className="flex justify-between items-start"> <h3 className="font-bold">{barrier.name}</h3> <span className="text-sm font-semibold px-2 py-1 rounded-full bg-white"> {barrier.severity} Severity </span> </div> <p className="text-sm mt-1">{barrier.description}</p> <div className="mt-2"> <h4 className="text-xs font-semibold uppercase">Affects Stages:</h4> <div className="flex flex-wrap mt-1 gap-1"> {barrier.affectedStages.map(stageId => { const stageName = journeyStagesData.find(s => s.id === stageId)?.name; return ( <span key={stageId} className="text-xs px-2 py-1 bg-white rounded-full border"> {stageName} </span> ); })} </div> </div> {barrier.isDropoutPoint && ( <div className="mt-2 flex items-center"> <svg className="w-4 h-4 text-red-600 mr-1" fill="currentColor" viewBox="0 0 20 20"> <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" /> </svg> <span className="text-xs font-semibold text-red-600">Patient Dropout Point</span> </div> )} </div> ))} </div> </div> ); }; // Render stakeholders view const renderStakeholders = () => { // Get all unique stakeholders across journey stages const allStakeholders = new Map(); journeyStagesData.forEach(stage => { stage.stakeholders.forEach(stakeholder => { if (!allStakeholders.has(stakeholder.name)) { allStakeholders.set(stakeholder.name, { name: stakeholder.name, stages: [] }); } allStakeholders.get(stakeholder.name).stages.push({ stageId: stage.id, stageName: stage.name, involvement: stakeholder.involvement }); }); }); return ( <div className="mt-4"> <h2 className="text-xl font-bold mb-4">Stakeholder Involvement Map</h2> <div className="overflow-x-auto"> <table className="min-w-full bg-white border border-gray-200"> <thead> <tr> <th className="py-2 px-4 border-b border-r text-left">Stakeholder</th> {journeyStagesData.map(stage => ( <th key={stage.id} className="py-2 px-4 border-b border-r text-center">{stage.name}</th> ))} </tr> </thead> <tbody> {Array.from(allStakeholders.values()).map((stakeholder, index) => ( <tr key={index} className={index % 2 === 0 ? 'bg-gray-50' : 'bg-white'}> <td className="py-2 px-4 border-b border-r font-medium">{stakeholder.name}</td> {journeyStagesData.map(stage => { const stageInfo = stakeholder.stages.find(s => s.stageId === stage.id); return ( <td key={stage.id} className="py-2 px-4 border-b border-r text-center"> {stageInfo ? ( <span className={`inline-block px-2 py-1 rounded-full text-xs ${getInvolvementColor(stageInfo.involvement)}`}> {stageInfo.involvement} </span> ) : ( <span className="text-gray-300">-</span> )} </td> ); })} </tr> ))} </tbody> </table> </div> </div> ); }; // Render interventions view const renderInterventions = () => { const scenarioImpact = calculateScenarioImpact(); return ( <div className="mt-4"> <div className="mb-4 bg-blue-50 border border-blue-200 rounded-lg p-4"> <div className="flex justify-between items-center"> <h2 className="text-xl font-bold text-blue-800">Scenario Modeling</h2> <div> <button onClick={() => setScenarioMode(!scenarioMode)} className={`px-4 py-2 mr-2 rounded-md ${scenarioMode ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > {scenarioMode ? 'Exit Scenario Mode' : 'Enter Scenario Mode'} </button> </div> </div> {scenarioMode && ( <p className="text-sm text-blue-700 mt-2"> Select intervention options below and run the scenario to see projected impact on the patient journey. </p> )} </div> {scenarioMode && showScenarioResults && scenarioImpact && ( <div className="mb-6 bg-green-50 border border-green-200 rounded-lg p-4"> <h3 className="text-lg font-bold text-green-800 mb-2">Scenario Impact Analysis</h3> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text-gray-500">Projected Dropout Rate</div> <div className="text-xl font-bold text-green-700">{(scenarioImpact.projectedDropout * 100).toFixed(1)}%</div> </div> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text-gray-500">Overall Impact</div> <div className="text-xl font-bold text-blue-700"> {((scenarioImpact.baselineDropout - scenarioImpact.projectedDropout) * 100).toFixed(1)}% Improvement </div> </div> </div> <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-4"> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text-gray-500">Patient Impact</div> <div className={`text-xl font-bold ${ scenarioImpact.patientImpact === "High" ? "text-green-700" : scenarioImpact.patientImpact === "Medium" ? "text-yellow-600" : "text-red-600" }`}>{scenarioImpact.patientImpact}</div> </div> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text-gray-500">System Impact</div> <div className={`text-xl font-bold ${ scenarioImpact.systemImpact === "High" ? "text-green-700" : scenarioImpact.systemImpact === "Medium" ? "text-yellow-600" : "text-red-600" }`}>{scenarioImpact.systemImpact}</div> </div> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text-gray-500">Implementation Effort</div> <div className={`text-xl font-bold ${ scenarioImpact.implementationEffort > 8 ? "text-red-600" : scenarioImpact.implementationEffort > 5 ? "text-yellow-600" : "text-green-700" }`}>{scenarioImpact.implementationEffort} / 15</div> </div> </div> <div className="mt-4"> <h4 className="font-semibold">Stages Most Impacted:</h4> <div className="flex flex-wrap gap-2 mt-2"> {scenarioImpact.impactedStages.map(stageId => { const stage = journeyStagesData.find(s => s.id === stageId); return stage ? ( <span key={stageId} className="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm"> {stage.name} </span> ) : null; })} </div> </div> <div className="flex justify-end mt-4"> <button onClick={handleResetScenario} className="px-4 py-2 bg-gray-200 rounded-md mr-2" > Reset Scenario </button> </div> </div> )} <div className="grid grid-cols-1 gap-4"> {interventionData.map(intervention => ( <div key={intervention.id} className={`p-4 rounded-lg border ${ selectedInterventions.includes(intervention.id) ? 'border-blue-500 bg-blue-50' : 'border-gray-200' }`} > <div className="flex justify-between items-start"> <div> <h3 className="font-bold text-lg">{intervention.name}</h3> <p className="text-gray-600 mt-1">{intervention.description}</p> </div> {scenarioMode && ( <div> <button onClick={() => handleInterventionToggle(intervention.id)} className={`px-3 py-1 rounded-md ${ selectedInterventions.includes(intervention.id) ? 'bg-blue-600 text-white' : 'bg-gray-200' }`} > {selectedInterventions.includes(intervention.id) ? 'Selected' : 'Select'} </button> </div> )} <span className={`text-sm font-semibold px-2 py-1 rounded-full ${getComplexityColor(intervention.implementationComplexity)}`}> {intervention.implementationComplexity} Complexity </span> </div> <div className="mt-3"> <h4 className="text-xs font-semibold uppercase text-gray-500">Impact Areas:</h4> <div className="flex flex-wrap mt-1 gap-1"> {intervention.impactAreas.map((area, index) => ( <span key={index} className="text-xs px-2 py-1 bg-blue-100 text-blue-800 rounded-full"> {area} </span> ))} </div> </div> <div className="mt-3"> <h4 className="text-xs font-semibold uppercase text-gray-500">Stakeholders Benefited:</h4> <div className="flex flex-wrap mt-1 gap-1"> {intervention.stakeholdersBenefited.map((stakeholder, index) => ( <span key={index} className="text-xs px-2 py-1 bg-purple-100 text-purple-800 rounded-full"> {stakeholder} </span> ))} </div> </div> <div className="mt-3"> <h4 className="text-xs font-semibold uppercase text-gray-500">Potential Outcomes:</h4> <ul className="list-disc pl-5 mt-1 text-sm"> {intervention.potentialOutcomes.map((outcome, index) => ( <li key={index}>{outcome}</li> ))} </ul> </div> </div> ))} </div> {scenarioMode && !showScenarioResults && ( <div className="flex justify-center mt-6"> <button onClick={handleRunScenario} disabled={selectedInterventions.length === 0} className={`px-6 py-3 rounded-md ${ selectedInterventions.length === 0 ? 'bg-gray-300 cursor-not-allowed' : 'bg-blue-600 text-white hover:bg-blue-700' }`} > Run Scenario with {selectedInterventions.length} Intervention{selectedInterventions.length !== 1 ? 's' : ''} </button> </div> )} </div> ); }; return ( <div className="max-w-full p-4"> <div className="mb-6"> <h1 className="text-2xl font-bold mb-1">Obesity Patient Journey - UK NHS Pathway</h1> <p className="text-gray-600">Interactive visualization of the patient journey through the UK obesity care pathway</p> </div> {/* View mode selector */} <div className="flex space-x-2 mb-6 flex-wrap"> <button onClick={() => setViewMode('journey')} className={`px-4 py-2 rounded-md mb-2 ${viewMode === 'journey' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Patient Journey </button> <button onClick={() => setViewMode('barriers')} className={`px-4 py-2 rounded-md mb-2 ${viewMode === 'barriers' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Barriers & Dropouts </button> <button onClick={() => setViewMode('stakeholders')} className={`px-4 py-2 rounded-md mb-2 ${viewMode === 'stakeholders' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Stakeholder Map </button> <button onClick={() => setViewMode('interventions')} className={`px-4 py-2 rounded-md mb-2 ${viewMode === 'interventions' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`} > Intervention Opportunities </button> </div> {viewMode === 'journey' && ( <> {/* Journey timeline */} <div className="mb-8 relative"> <div className="h-2 bg-gray-200 absolute top-4 left-0 right-0 z-0"></div> <div className="flex justify-between relative z-10"> {journeyStagesData.map((stage) => ( <div key={stage.id} className="flex flex-col items-center cursor-pointer" onClick={() => handleStageClick(stage)}> <div className={`w-10 h-10 rounded-full flex items-center justify-center ${selectedStage?.id === stage.id ? 'bg-blue-600 text-white' : 'bg-white border-2 border-gray-300'}`}> {stage.id} </div> <div className="text-sm mt-2 text-center font-medium">{stage.name}</div> <div className="text-xs text-center text-gray-500"> {stage.dropoutRate * 100}% dropout </div> </div> ))} </div> </div> {/* Emotional journey */} <div className="mb-8"> <h2 className="text-lg font-semibold mb-2">Patient Emotional Journey</h2> <div className="flex justify-between"> {journeyStagesData.map((stage) => ( <div key={stage.id} className="flex flex-col items-center w-1/6 px-2"> <div className={`w-full p-2 rounded-lg text-center text-sm ${getEmotionColor(stage.emotionalState)}`}> {stage.emotionalState} </div> </div> ))} </div> </div> {/* NHS Tiers Representation */} <div className="mb-8"> <h2 className="text-lg font-semibold mb-2">NHS Service Tiers</h2> <div className="flex justify-between"> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-gray-100"> Self-Management </div> </div> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-gray-100"> Tier 1 </div> </div> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-yellow-100"> Tier 2 </div> </div> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-orange-100"> Tier 3 </div> </div> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-red-100"> Tier 4 </div> </div> <div className="flex flex-col items-center w-1/6 px-2"> <div className="w-full p-2 rounded-lg text-center text-sm bg-gray-100"> Follow-up Care </div> </div> </div> </div> {/* Selected stage details */} {selectedStage && ( <div className="mt-6 border rounded-lg p-6 bg-white shadow-sm"> <h2 className="text-xl font-bold mb-2">{selectedStage.name}</h2> <p className="text-gray-600 mb-4">{selectedStage.description}</p> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> {/* Left column */} <div> <div className="mb-6"> <h3 className="text-lg font-semibold mb-2">Patient Activities</h3> <ul className="list-disc pl-5 space-y-1"> {selectedStage.activities.map((activity, index) => ( <li key={index} className="text-gray-700">{activity}</li> ))} </ul> </div> <div className="mb-6"> <h3 className="text-lg font-semibold mb-2">Pain Points</h3> <ul className="space-y-2"> {selectedStage.painPoints.map((point, index) => ( <li key={index} className="flex items-start"> <svg className="w-5 h-5 text-red-500 mr-2 mt-0.5 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20"> <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z" clipRule="evenodd" /> </svg> <span className="text-gray-700">{point}</span> </li> ))} </ul> </div> <div> <h3 className="text-lg font-semibold mb-2">Information Sources</h3> <ul className="list-disc pl-5 space-y-1"> {selectedStage.infoSources.map((source, index) => ( <li key={index} className="text-gray-700">{source}</li> ))} </ul> </div> </div> {/* Right column */} <div> <div className="mb-6"> <h3 className="text-lg font-semibold mb-2">Key Stakeholders</h3> <div className="space-y-2"> {selectedStage.stakeholders.map((stakeholder, index) => ( <div key={index} className="flex justify-between items-center border rounded p-2"> <span className="text-gray-700">{stakeholder.name}</span> <span className={`px-2 py-1 rounded-full text-xs ${getInvolvementColor(stakeholder.involvement)}`}> {stakeholder.involvement} Involvement </span> </div> ))} </div> </div> <div> <h3 className="text-lg font-semibold mb-2">Critical Decision Points</h3> <div className="space-y-4"> {selectedStage.decisionPoints.map((point, index) => ( <div key={index} className="border rounded-lg p-3 bg-yellow-50"> <h4 className="font-semibold text-gray-800">{point.name}</h4> <p className="text-sm text-gray-600 mb-2">{point.description}</p> <h5 className="text-xs font-semibold uppercase text-gray-500 mt-2">Key Factors:</h5> <ul className="list-disc pl-5 text-sm"> {point.keyFactors.map((factor, idx) => ( <li key={idx}>{factor}</li> ))} </ul> </div> ))} </div> </div> </div> </div> </div> )} {!selectedStage && ( <div className="text-center p-10 border rounded-lg bg-gray-50"> <p className="text-gray-600">Select a journey stage above to view detailed information</p> </div> )} </> )} {viewMode === 'barriers' && renderBarriers()} {viewMode === 'stakeholders' && renderStakeholders()} {viewMode === 'interventions' && renderInterventions()} </div> ); } export default ObesityJourneyTool;-gray-500">Baseline Dropout Rate</div> <div className="text-xl font-bold">{(scenarioImpact.baselineDropout * 100).toFixed(1)}%</div> </div> <div className="bg-white p-3 rounded-lg border border-green-100"> <div className="text-sm text